`timescale 1ns / 1ps

module dct_2d_tb;

    // Inputs
    reg clk;
    reg rst_n;
    reg start;
    reg [7:0] pixel_in;

    // Outputs
    wire signed [15:0] dct_out;
    wire valid_out;
    wire done;

    // Instantiate the Unit Under Test (UUT)
    dct_2d uut (
        .clk(clk),
        .rst_n(rst_n),
        .start(start),
        .pixel_in(pixel_in),
        .dct_out(dct_out),
        .valid_out(valid_out),
        .done(done)
    );

    // Clock generation
    always #5 clk = ~clk; // 100MHz

    // Input pixel block
    reg [7:0] input_pixels [0:63]; // 8x8 = 64 values
    integer i;

    initial begin
        $display("=== Starting DCT 2D Testbench ===");
        clk = 0;
        rst_n = 0;
        start = 0;
        pixel_in = 0;

        // Initialize input pixels with a simple pattern
        for (i = 0; i < 64; i = i + 1) begin
            input_pixels[i] = i; // You can replace this with other test data
        end

        // Apply reset
        #20;
        rst_n = 1;

        // Wait a few cycles, then start
        #20;
        start = 1;

        // Feed pixel data
        for (i = 0; i < 64; i = i + 1) begin
            @(posedge clk);
            pixel_in <= input_pixels[i];
        end

        // Stop providing pixels
        @(posedge clk);
        start <= 0;
        pixel_in <= 0;

        // Wait for output
        wait(done);
        #20;

        $display("=== DCT 2D Finished ===");
        $finish;
    end

    // Monitor outputs
    always @(posedge clk) begin
        if (valid_out) begin
            $display("Output #%0d: %d", uut.counter, dct_out);
        end
    end

endmodule
