module entropy_encoder (
    input               clk,
    input               rst,
    input               in_valid,
    input       [5:0]   in_index,     // index 0–63
    input signed [15:0] in_coeff,     // hệ số Zig-Zag
    output reg          out_valid,
    output reg [15:0]   out_code,     // mã Huffman + amplitude
    output reg [3:0]    out_len       // độ dài mã Huffman + amplitude
);

    // Declarations
    integer i;

    // Huffman codebooks
    reg [15:0] dc_codebook[0:11];
    reg [3:0]  dc_codelen[0:11];
    reg [15:0] ac_codebook[0:255];
    reg [3:0]  ac_codelen[0:255];

    initial begin
        // DC Huffman table (simplified JPEG luminance)
        dc_codebook[0] = 16'b00;         dc_codelen[0] = 2;
        dc_codebook[1] = 16'b010;        dc_codelen[1] = 3;
        dc_codebook[2] = 16'b011;        dc_codelen[2] = 3;
        dc_codebook[3] = 16'b100;        dc_codelen[3] = 3;
        dc_codebook[4] = 16'b101;        dc_codelen[4] = 3;
        dc_codebook[5] = 16'b110;        dc_codelen[5] = 3;
        dc_codebook[6] = 16'b1110;       dc_codelen[6] = 4;
        dc_codebook[7] = 16'b11110;      dc_codelen[7] = 5;
        dc_codebook[8] = 16'b111110;     dc_codelen[8] = 6;
        dc_codebook[9] = 16'b1111110;    dc_codelen[9] = 7;
        dc_codebook[10] = 16'b11111110;  dc_codelen[10] = 8;
        dc_codebook[11] = 16'b111111110; dc_codelen[11] = 9;

        // AC Huffman table
        ac_codebook[0] = 16'b1010;       ac_codelen[0] = 4;  // EOB (run=0, size=0)
        ac_codebook[1] = 16'b00;         ac_codelen[1] = 2;  // run=0, size=1
        ac_codebook[2] = 16'b01;         ac_codelen[2] = 2;  // run=0, size=2
        ac_codebook[3] = 16'b100;        ac_codelen[3] = 3;  // run=0, size=3
        ac_codebook[240] = 16'b1111000;  ac_codelen[240] = 7; // ZRL (run=15, size=0)
        // Additional AC codes as needed
    end

    reg signed [15:0] dc_prev;
    reg [5:0] ac_ptr;
    reg [3:0] run_length;
    reg [15:0] amplitude;
    reg [3:0] category_val;

    function [3:0] category;
        input signed [15:0] val;
        begin
            if (val == 0) category = 0;
            else if (val >= -1 && val <= 1) category = 1;
            else if (val >= -3 && val <= 3) category = 2;
            else if (val >= -7 && val <= 7) category = 3;
            else if (val >= -15 && val <= 15) category = 4;
            else if (val >= -31 && val <= 31) category = 5;
            else if (val >= -63 && val <= 63) category = 6;
            else if (val >= -127 && val <= 127) category = 7;
            else if (val >= -255 && val <= 255) category = 8;
            else if (val >= -511 && val <= 511) category = 9;
            else if (val >= -1023 && val <= 1023) category = 10;
            else category = 11;
        end
    endfunction

    function [15:0] get_amplitude;
        input signed [15:0] val;
        input [3:0] cat;
        begin
            if (val >= 0)
                get_amplitude = val;
            else
                get_amplitude = val + (1 << cat) - 1;
        end
    endfunction

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            out_valid <= 0;
            out_code <= 0;
            out_len <= 0;
            dc_prev <= 0;
            ac_ptr <= 0;
            run_length <= 0;
        end else if (in_valid) begin
            out_valid <= 0;
            category_val = category(in_coeff);
            amplitude = get_amplitude(in_coeff, category_val);

            if (in_index == 0) begin
                // DC encoding
                out_code <= dc_codebook[category_val];
                out_len <= dc_codelen[category_val];
                out_valid <= 1;
                dc_prev <= in_coeff;
                run_length <= 0;
                ac_ptr <= 1;
            end else begin
                // AC encoding
                if (in_coeff == 0) begin
                    run_length <= run_length + 1;
                    if (run_length == 15 && in_index < 63) begin
                        // Output ZRL code
                        out_code <= ac_codebook[240]; // run=15, size=0
                        out_len <= ac_codelen[240];
                        out_valid <= 1;
                        run_length <= 0;
                    end else if (in_index == 63) begin
                        // Output EOB
                        out_code <= ac_codebook[0];
                        out_len <= ac_codelen[0];
                        out_valid <= 1;
                        run_length <= 0;
                    end
                end else begin
                    // Non-zero AC coefficient
                  //  out_code <= {ac_codebook[{run_length, category_val}], amplitude[category_val-1:0]};
                    out_len <= ac_codelen[{run_length, category_val}] + category_val;
                    out_valid <= 1;
                    run_length <= 0;
                end
            end
        end else begin
            out_valid <= 0;
        end
    end
endmodule