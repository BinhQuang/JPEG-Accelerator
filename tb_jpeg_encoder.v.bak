```verilog
`timescale 1ns / 1ps

module tb_jpeg_encoder;

    // Tín hiệu đầu vào
    reg clk;
    reg rst_n;
    reg start;
    reg [7:0] R_in, G_in, B_in;
    reg valid_in;

    // Tín hiệu đầu ra
    wire [15:0] code_out;
    wire [3:0] code_len;
    wire valid_out;
    wire img_done;

    // Khởi tạo module jpeg_encoder
    jpeg_encoder u_jpeg_encoder (
        .clk(clk),
        .rst_n(rst_n),
        .start(start),
        .R_in(R_in),
        .G_in(G_in),
        .B_in(B_in),
        .valid_in(valid_in),
        .code_out(code_out),
        .code_len(code_len),
        .valid_out(valid_out),
        .img_done(img_done)
    );

    // Tham số
    parameter CLK_PERIOD = 10; // Chu kỳ đồng hồ 10ns (100MHz)
    parameter IMG_WIDTH = 64;
    parameter IMG_HEIGHT = 64;
    parameter TOTAL_PIXELS = IMG_WIDTH * IMG_HEIGHT;

    // Biến nội bộ
    integer pixel_count;
    integer output_file;
    integer i, j;

    // Tạo đồng hồ
    initial begin
        clk = 0;
        forever #(CLK_PERIOD/2) clk = ~clk;
    end

    // Hàm tạo pixel RGB (gradient đơn giản)
    task generate_pixel;
        output [7:0] R, G, B;
        input [15:0] idx;
        begin
            // Tạo gradient: R tăng theo hàng, G tăng theo cột, B cố định
            R = (idx / IMG_WIDTH) * 4; // Tăng 4 mỗi hàng
            G = (idx % IMG_WIDTH) * 4; // Tăng 4 mỗi cột
            B = 8'd128;                // Giá trị cố định
        end
    endtask

    // Quy trình kiểm tra
    initial begin
        // Khởi tạo tín hiệu
        rst_n = 0;
        start = 0;
        valid_in = 0;
 Bergh

        R_in = 0;
        G_in = 0;
        B_in = 0;
        pixel_count = 0;

        // Mở file để ghi mã Huffman
        output_file = $fopen("huffman_output.txt", "w");

        // Reset
        #(CLK_PERIOD * 5);
        rst_n = 1;
        #(CLK_PERIOD * 5);

        // Bắt đầu quá trình mã hóa
        start = 1;
        #(CLK_PERIOD);
        start = 0;

        // Gửi pixel RGB
        for (i = 0; i < TOTAL_PIXELS; i = i + 1) begin
            valid_in = 1;
            generate_pixel(R_in, G_in, B_in, i);
            #(CLK_PERIOD);
        end
        valid_in = 0;

        // Chờ hoàn tất ảnh
        wait (img_done);
        #(CLK_PERIOD * 10);

        // Đóng file và kết thúc mô phỏng
        $fclose(output_file);
        $display("Mã hóa ảnh hoàn tất. Kiểm tra file huffman_output.txt.");
        $finish;
    end

    // Ghi mã Huffman vào file khi valid_out cao
    always @(posedge clk) begin
        if (valid_out) begin
            $fwrite(output_file, "Code: %h, Length: %d\n", code_out, code_len);
        end
    end

    // Giám sát tín hiệu
    initial begin
        $monitor("Time=%0t: valid_out=%b, img_done=%b, code_out=%h, code_len=%d",
                 $time, valid_out, img_done, code_out, code_len);
    end
endmodule
```